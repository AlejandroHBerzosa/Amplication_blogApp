# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  deletePost(where: PostWhereUniqueInput!): Post!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Post {
  content: String!
  createdAt: DateTime!
  date: DateTime
  id: String!
  title: String!
  updatedAt: DateTime!
  user: User
}

input PostCreateInput {
  content: String!
  date: DateTime
  title: String!
  user: UserWhereUniqueInput
}

input PostCreateNestedManyWithoutUsersInput {
  connect: [PostWhereUniqueInput!]
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByInput {
  content: SortOrder
  createdAt: SortOrder
  date: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input PostUpdateInput {
  content: String
  date: DateTime
  title: String
  user: UserWhereUniqueInput
}

input PostUpdateManyWithoutUsersInput {
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
}

input PostWhereInput {
  content: StringFilter
  date: DateTimeNullableFilter
  id: StringFilter
  title: StringFilter
  user: UserWhereUniqueInput
}

input PostWhereUniqueInput {
  id: String!
}

type Query {
  _postsMeta(where: PostWhereInput): MetaQueryPayload!
  _usersMeta(where: UserWhereInput): MetaQueryPayload!
  post(where: PostWhereUniqueInput!): Post
  posts(orderBy: [PostOrderByInput!], skip: Float, take: Float, where: PostWhereInput): [Post!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: String!
  posts(orderBy: [PostOrderByInput!], skip: Float, take: Float, where: PostWhereInput): [Post!]!
  roles: JSON
  updatedAt: DateTime!
  username: String
}

input UserCreateInput {
  email: String!
  password: String!
  posts: PostCreateNestedManyWithoutUsersInput
  roles: JSON
  username: String
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  email: String
  password: String
  posts: PostUpdateManyWithoutUsersInput
  roles: JSON
  username: String
}

input UserWhereInput {
  email: StringFilter
  id: StringFilter
  posts: PostListRelationFilter
  username: StringNullableFilter
}

input UserWhereUniqueInput {
  id: String!
}