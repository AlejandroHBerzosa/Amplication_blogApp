/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WeatherDatum } from "./WeatherDatum";
import { WeatherDatumCountArgs } from "./WeatherDatumCountArgs";
import { WeatherDatumFindManyArgs } from "./WeatherDatumFindManyArgs";
import { WeatherDatumFindUniqueArgs } from "./WeatherDatumFindUniqueArgs";
import { CreateWeatherDatumArgs } from "./CreateWeatherDatumArgs";
import { UpdateWeatherDatumArgs } from "./UpdateWeatherDatumArgs";
import { DeleteWeatherDatumArgs } from "./DeleteWeatherDatumArgs";
import { Post } from "../../post/base/Post";
import { WeatherDatumService } from "../weatherDatum.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WeatherDatum)
export class WeatherDatumResolverBase {
  constructor(
    protected readonly service: WeatherDatumService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WeatherDatum",
    action: "read",
    possession: "any",
  })
  async _weatherDataMeta(
    @graphql.Args() args: WeatherDatumCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WeatherDatum])
  @nestAccessControl.UseRoles({
    resource: "WeatherDatum",
    action: "read",
    possession: "any",
  })
  async weatherData(
    @graphql.Args() args: WeatherDatumFindManyArgs
  ): Promise<WeatherDatum[]> {
    return this.service.weatherData(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WeatherDatum, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WeatherDatum",
    action: "read",
    possession: "own",
  })
  async weatherDatum(
    @graphql.Args() args: WeatherDatumFindUniqueArgs
  ): Promise<WeatherDatum | null> {
    const result = await this.service.weatherDatum(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WeatherDatum)
  @nestAccessControl.UseRoles({
    resource: "WeatherDatum",
    action: "create",
    possession: "any",
  })
  async createWeatherDatum(
    @graphql.Args() args: CreateWeatherDatumArgs
  ): Promise<WeatherDatum> {
    return await this.service.createWeatherDatum({
      ...args,
      data: {
        ...args.data,

        posts: args.data.posts
          ? {
              connect: args.data.posts,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WeatherDatum)
  @nestAccessControl.UseRoles({
    resource: "WeatherDatum",
    action: "update",
    possession: "any",
  })
  async updateWeatherDatum(
    @graphql.Args() args: UpdateWeatherDatumArgs
  ): Promise<WeatherDatum | null> {
    try {
      return await this.service.updateWeatherDatum({
        ...args,
        data: {
          ...args.data,

          posts: args.data.posts
            ? {
                connect: args.data.posts,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WeatherDatum)
  @nestAccessControl.UseRoles({
    resource: "WeatherDatum",
    action: "delete",
    possession: "any",
  })
  async deleteWeatherDatum(
    @graphql.Args() args: DeleteWeatherDatumArgs
  ): Promise<WeatherDatum | null> {
    try {
      return await this.service.deleteWeatherDatum(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Post, {
    nullable: true,
    name: "posts",
  })
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "read",
    possession: "any",
  })
  async getPosts(@graphql.Parent() parent: WeatherDatum): Promise<Post | null> {
    const result = await this.service.getPosts(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
