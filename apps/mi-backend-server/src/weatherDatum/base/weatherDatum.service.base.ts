/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  WeatherDatum as PrismaWeatherDatum,
  Post as PrismaPost,
} from "@prisma/client";

export class WeatherDatumServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WeatherDatumCountArgs, "select">
  ): Promise<number> {
    return this.prisma.weatherDatum.count(args);
  }

  async weatherData(
    args: Prisma.WeatherDatumFindManyArgs
  ): Promise<PrismaWeatherDatum[]> {
    return this.prisma.weatherDatum.findMany(args);
  }
  async weatherDatum(
    args: Prisma.WeatherDatumFindUniqueArgs
  ): Promise<PrismaWeatherDatum | null> {
    return this.prisma.weatherDatum.findUnique(args);
  }
  async createWeatherDatum(
    args: Prisma.WeatherDatumCreateArgs
  ): Promise<PrismaWeatherDatum> {
    return this.prisma.weatherDatum.create(args);
  }
  async updateWeatherDatum(
    args: Prisma.WeatherDatumUpdateArgs
  ): Promise<PrismaWeatherDatum> {
    return this.prisma.weatherDatum.update(args);
  }
  async deleteWeatherDatum(
    args: Prisma.WeatherDatumDeleteArgs
  ): Promise<PrismaWeatherDatum> {
    return this.prisma.weatherDatum.delete(args);
  }

  async getPosts(parentId: string): Promise<PrismaPost | null> {
    return this.prisma.weatherDatum
      .findUnique({
        where: { id: parentId },
      })
      .posts();
  }
}
